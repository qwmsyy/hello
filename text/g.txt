git作为支持分布式版本管理的工具，它管理的库（repository）分为本地库、远程库。
git commit操作的是本地库，git push操作的是远程库。

git commit是将本地修改过的文件提交到本地库中。
git push是将本地库中的最新信息发送给远程库。
!==

str_repeat(string,repeat) 把字符串重复指定的次数。
string	必需。规定要重复的字符串。
repeat	必需。规定字符串将被重复的次数。必须大于等于 0。
 /*防止跨域*/      
header('Access-Control-Allow-Origin: '.$_SERVER['HTTP_ORIGIN']);
header('Access-Control-Allow-Credentials: true');
header('Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS');
header("Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept, authKey, sessionId");


/**
 * 生成长度为len的包含a-z、A-Z、0-9的随机字符串
 */
function generateStr(len = 18) {
	// 一行代码生成0-9、A-Z、a-z、总长度为62的字符数组
	var arr = [...new Array(62)].map((item, i) => String.fromCharCode(i + (i < 10 ? 0 : (i < 36 ? 7 : 13)) + 48));
	return [...new Array(len)].map(() => arr[Math.floor(Math.random() * arr.length)]).join('');
}


uniacid / no / 1 / 首页图
			 / 2 / 轮播图
			 / 3 / 
访问域名：http://sap.weiqisheng.net

用户：ftp_sap_weiqisheng_net

密码：Cry3NY5kbxp3HD34

数据库账号资料

数据库名：sql_sap_weiqishe

用户：sql_sap_weiqishe

密码：PZnNcWEzCfSxL8ES

商品组装 拆分：
仓库 时间 经手人 商品编号（唯一） 名称 组装数量 子产品（选择） 备注 类型（组装 拆分）
				

全局配置表（系统配置 设置对应管理员角色权限）
	计费方式（件 重量 体积）
	计量单位（桶，箱，个）
	仓库（id 名称）
	入库类别(生产、外加工。。。退货)
	产品类型（材料、成品）
	财务类别、
	资金账户、
	发票类别、
	出库类别、
	财务类别、
	资金账户、
	
	销售 采购 仓库 财务 客服

createtime
updatetime
发票状态 已/未开票
订单状态 未支付 已支付 未发货 待收货  待评价 交易完成 待核销 已核销 退款中 已退款 已删除
支付状态 微信 支付宝 余额 线下 


登录用户
ID 账号 密码 组别 盐 注册时间 修改时间

用户组
ID 名称 权限组

商品  三级目录 多条件搜索（仓库、位置、供应商(快捷添加)、分类、名称） 批量操作  货架？
	分类  编号    规格/型号 名称       计量单位     拼音码     销售价格         批发价格          成本价格      库存位置  库存数         仓库            库存上限   库存下限    条码        供应商        备注 
	gc_id g_no   g_norms    goods_name g_unit_id 	g_pingyin  g_spelling_price g_wholesale_price g_cost_price 	g_place   goods_storage 	g_warehouse_id   g_up_limit g_down_limt goods_barcode g_supplier_id g_remarks
	
CREATE TABLE `mshop_goods` ( 
  `goods_id` int unsigned NOT NULL AUTO_INCREMENT COMMENT '商品id(SKU)'，
  `goods_serial` varchar(50) DEFAULT '' COMMENT '商品货号',

  ）
	`gc_id` int unsigned NOT NULL COMMENT '商品分类id',
	`gc_id_1` int unsigned NOT NULL COMMENT '一级分类id',
	`gc_id_2` int unsigned NOT NULL COMMENT '二级分类id',
	`gc_id_3` int unsigned NOT NULL COMMENT '三级分类id',

分类表 
ID 名称 父ID

已收款

运费模板
	模板ID 模板名称 计费方式 。。。（配送区域 首件 运费 续件 续费 ） 指定包邮 排序
CREATE TABLE `sap_transport` (
  `transport_id` int unsigned NOT NULL AUTO_INCREMENT COMMENT '模板id ',
  `transport_name` varchar(120) NOT NULL COMMENT '模板名称',
  `transport_distribution_area` varchar(120) NOT NULL COMMENT '配送区域',
  `transport_first_num` tinyint unsigned NOT NULL COMMENT '首件',
  `transport_first_money` tinyint unsigned NOT NULL COMMENT '运费',
  `transport_second_num` tinyint unsigned NOT NULL COMMENT '续件',
  `transport_second_money` tinyint unsigned NOT NULL COMMENT '续费',
  `transport_sort` tinyint unsigned NOT NULL COMMENT '排序',
  PRIMARY KEY (`transport_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='运费模板表';
调拨 仓库->仓库
	日期，调出的仓库,调入的仓库，经手人、备注，产品合计数量,价格
	
库存盘点 （修改商品信息日志）
	修改数据，修改原因、盘点时间、仓库，经手人，备注
	
入库 （添加商品信息日志）
	入库仓库、位置、时间、入库类别(生产、外加工。。。退货)、产品类型（材料、成品）、经手人、备注、入库产品合计数量，价格

出库 （修改商品信息） 多条件搜索（时间段、仓库、客户名称），综合数据统计(总数量、价格) 可选择要出库的仓库的商品
	出库客户、出库时间、合计产品数量、价格、仓库、业务类别？、备注、经手人
	
	
	
拆分（修改商品信息 减少库存 并且添加新的商品 产生记录）
	拆分产品，拆分个数、时间、经手人、操作
	拆分数据列表（商品编号、被拆分商品、仓库、时间、拆分数量、拆分详情可以查看拆分以后产品库存数量）
	
组装


5de0e6f5b82ea804824e2bb4f4e7a380

public static function getMore($params, $request = null, $suffix = false)
{
	if ($request === null) $request = app('request');
	$p = [];
	$i = 0;
	foreach ($params as $param) {
		if (!is_array($param)) {
			$p[$suffix == true ? $i++ : $param] = $request->param($param);
		} else {
			if (!isset($param[1])) $param[1] = null;
			if (!isset($param[2])) $param[2] = '';
			if (is_array($param[0])) {
				$name = is_array($param[1]) ? $param[0][0] . '/a' : $param[0][0] . '/' . $param[0][1];
				$keyName = $param[0][0];
			} else {
				$name = is_array($param[1]) ? $param[0] . '/a' : $param[0];
				$keyName = $param[0];
			}
			$p[$suffix == true ? $i++ : (isset($param[3]) ? $param[3] : $keyName)] = $request->param($name, $param[1], $param[2]);
		}
	}
	return $p;
}

ms0921
Access-Control-Allow-Headers
	Authorization, Content-Type, If-Match, If-Modified-Since, If-None-Match, If-Unmodified-Since, X-CSRF-TOKEN, X-Requested-With
	
	
	
1.Voinc 一个基于 vue.js 和 ionic 样式的 UI 框架（https://wangdahoo.github.io/vonic-documents/#/?id=%E4%BB%8B%E7%BB%8D）
2.Vux 基于WeUI和Vue(2.x)开发的移动端UI组件库 （https://vux.li/#/?id=%E7%AE%80%E4%BB%8B）
3. NutUI 京东轻量级移动端Vue组件库（https://nutui.jd.com/#/index）
4. .Mint UI 由饿了么前端团队推出的 Mint UI （http://mint-ui.github.io/docs/#/zh-cn2）
5. Vant是有赞前端团队基于有赞统一的规范实现的 Vue 组件库（https://github.com/youzan/zent）
6. Cube UI 滴滴 WebApp实现的移动端组件库（https://didi.github.io/cube-ui/#/zh-CN/docs/quick-start）

Vue中computed和watch的区别：

计算属性computed : 
1. 支持缓存，只有依赖数据发生改变，才会重新进行计算
2. 不支持异步，当computed内有异步操作时无效，无法监听数据的变化
3.computed 属性值会默认走缓存，计算属性是基于它们的响应式依赖进行缓存的，也就是基于data中声明过或者父组件传递的props中的数据通过计算得到的值
4. 如果一个属性是由其他属性计算而来的，这个属性依赖其他属性，是一个多对一或者一对一，一般用computed
5.如果computed属性属性值是函数，那么默认会走get方法；函数的返回值就是属性的属性值；在computed中的，属性都有一个get和一个set方法，当数据变化时，调用set方法。
watch:{
	a(new,old){
		setTimeout(()=>{{
			if(new.length<3){
				this.msg = "密码太短";
				return
			}
			if(new.length>6){
				this.msg = "密码太长";
				return
			}
			this.msg = "";
		},1000)
	}
}

侦听属性watch：
1. 不支持缓存，数据变，直接会触发相应的操作；
2.watch支持异步；
3.监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；
4. 当一个属性发生变化时，需要执行对应的操作；一对多；
5. 监听数据必须是data中声明过或者父组件传递过来的props中的数据，当数据变化时，触发其他操作，函数有两个参数，
　　immediate：组件加载立即触发回调函数执行，
　　deep: 深度监听，为了发现对象内部值的变化，复杂类型的数据时使用，例如数组中的对象内容的改变，注意监听数组的变动不需要这么做。注意：deep无法监听到数组的变动和对象的新增，
	参考vue数组变异,只有以响应式的方式触发才会被监听到。
监听的对象也可以写成字符串的形式：
data:{
	user_info:{'
	
		name:'blue',
		age:21
	}
},
watch:{
	'user_info':function(){
		// ....
	}
}

{
	el: '#app',
	data: {
		message: 'Hello Vue!'
	}
}

vm.a === data.a // -> true
vm.$el === document.getElementById('app') // -> true
vm.$data === data // -> true

					父子之间传值
父组件向子组件传值： 
parent：
<parent>
    <child :message="msg"></child>
</parent>
data(){
    return {
        msg: "this is parent message"
    }
}

child：
<div>
    <p>{{message}}</p>
</div>
data(){
    props:["message"]
	or
	props: {
		message: {
			type: String,                 //可指定接收类型，如:Array.
			default:"this is default"     //可设置默认值
		}
	}
	or
	props: {
		message: {
			type: Array,
			default: ['foo','bar','baz']   //默认值
		}
	}
}

子组件向父组件传值 
child：
<template>
    <button v-on:click ='setValue'>setValue</button>
</template>
data(){
    return {
        value: "sendValue"
    }
}，
methods:{
    setValue:function(){ 
        this.$emit('getdata',this.value); //this.value为向父组件传递的数据
    }
}

parent：
<div id="app">
    <child @getdata="receive" ></child> //自动监听由子组件"注册"的 'getdata'事件,然后调用receive方法来更改数据
    <p>{{value}}</p>
</div>
data(){
    return{
        value:"default"
    }
  },
methods: {
    receive:function(val) {
        this.value = val;
    }
}

hb159357

RTi8PZsHzHi66RPD

Failed to execute 'setRequestHeader' on 'XMLHttpRequest': Value is not a valid ByteString

原因分析
请求的头信息中不能出现中文或UTF-8码的字符

ftp_crmb_weiqisheng_net
Bbe5kmFRX3aiipHC

this.$set(obj, key, value)

<router-view></router-view>？
<router-view></router-view>

{"date":"5","mony":[],"sum":[[118,119,2,0,111,0,7]],"aa":"2021-06-01 00:00:00","bb":"2021-07-01 00:00:00"}

表单初始化Form.api.bindevent之前使用
$("#c-name").data("params", function (obj) {
    return {custom: {type: $("#c-type").val()}};
});

add: function () {
    $(document).on("change", "#c-ditch_id", function () {
        $.post("goods/index",{
        //搜索条件，上一个selectpage选择完后传过来的id作为此次搜索的条件
            custom: {ditch_id: $('#c-ditch_id').val()},
            keyField:'id',
            showField:'goods_name',
            },function(result){
            console.log(result);
            //刷新数据的关键，我也是看了文档才知道有这么一个方法，动态更改数据源
            $('#c-goods_id').selectPageData(result.list);
        });
    })
    Controller.api.bindevent();
},
