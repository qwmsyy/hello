
let reg = /a/; // 没有引号
let str = 'sadfb1adfs'

reg.test(str)

匹配字符串中(b)是否存在指定的字符串(a)

/.../i 忽略大小写

str.match(reg)
	[
		0: "a", 
		index: 1, 
		input: "sadfb1adfs", 
		groups: undefined
	]

/.../g 搜索多个 可以和i 一起 //gi
	[ 'a', 'a' ] 似乎只有匹配到的数量和字符
	
通配符 . 可匹配任意字符一次
	/hu./ hug, huh, hut, hum
	
/[aeiou]/gi 匹配方括号中任意一个字符

- /[a-e]/gi 匹配a至e中的任意一个字符 （范围）

^ 不包含 ., !, [, @, / and white space are matched 
	/[^aeiou]/gi
	/^Cal/ 以Cal开头
	
+ 匹配至少1次

* 匹配至少0次

? 懒匹配 默认贪婪匹配 即匹配最长的符合规则的字符串
	/t[a-z]*i/  titanic  ["titani"]
	/t[a-z]*?i/ ["ti"]

$ 匹配结尾 ^开头

{} 出现次数 两个参数是范围 一个加逗号是最小值 不加是确切值

简写
\w 匹配所有的字符和数字 等同于[A-Za-z0-9_]
\W 匹配所有的非字符和数字 等同于[^A-Za-z0-9_]
\d 数字 [0-9]
\D 		[^0-9]
\s 空格 [ \r\t\f\n\v]
\S 		[^ \r\t\f\n\v] 注意方括号中的空格

/colou?r/  color colour     all is true
u?为一个整体

() 一组字符串 /P(engu|umpk)in/g  []单个字符

/^(\d+)\s\1\s\1$/  \1 重复()中的内容 ()捕获分组 从左到右 第一个()为1 ()2

replace() 替换
	let wrongText = "The sky is silver.";
	let silverRegex = /silver/;
	wrongText.replace(silverRegex, "blue");
	
	"Code Camp".replace(/(\w+)\s(\w+)/, '$2 $1');
	Camp Code
	
=
!

?????????
(?=pattern) 正向肯定预查 Windows(?=95|98|NT|2000) 能匹配"Windows2000"中的"Windows"，但不能匹配"Windows3.1"中的"Windows"

(?!pattern)	正向否定预查 Windows(?!95|98|NT|2000)"能匹配"Windows3.1"中的"Windows"，但不能匹配"Windows2000"中的"Windows"

(?<=pattern) 反向肯定预查 (?<=95|98|NT|2000)Windows"能匹配"2000Windows"中的"Windows"，但不能匹配"3.1Windows"中的"Windows"

(?<！pattern) 反向否定预查 "(?<!95|98|NT|2000)Windows"能匹配"3.1Windows"中的"Windows"，但不能匹配"2000Windows"中的"Windows"。
